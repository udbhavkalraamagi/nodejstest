#!/usr/local/bin/node
const fs = require('fs');
const options = require('options');
var hash = {}
var final_result_hash = {}

function c(a){
  console.log(a);
}

function call_help(arg){
  if(arg == 'args'){
  	c('Please check the command line options (It should be node grep_functions.js <optional -n/-i/-g> pattern_text_string fileName/folderName)');
  	process.exit(1);
  }

  if(arg == 'help'){
  	c('Execute like : node grep_functions.js <optional -n/-i/-g> pattern_text_string fileName/folderName)');
  }
}


function get_match_indexes(filename) {
  return new Promise(resolve => {
    fs.readFile(filename,(err,data)=>{
	   if(err) reject(err);
	   resolve(data);
	 });
  });
}

async function get_data_from_file(filename, pattern, flags, files_count){
  
  var data = await get_match_indexes(filename);

  var local_flags = "g"  
  if(flags['i'] == 1)
  	local_flags += "i"

  final_result_hash[filename] = {}
  final_result_hash[filename]['empty'] = 1

  var file_content = data.toString();
  var lines = file_content.split("\n");
  var lines_count = lines.length
  let anymatch = 0;
  
  for(var line_number=1; line_number<=lines_count; line_number++){	  	  		
    var myRegexp = new RegExp(pattern, local_flags)
    var result, last_index = -1, last_line = -1
    if ( (result = myRegexp.exec(lines[line_number-1]))) {
    	if(flags['n'] == 1){
    		if(files_count > 1)
    		  c(filename+":"+line_number+":"+lines[line_number-1].toString())
    		else
    		  c(line_number+":"+lines[line_number-1].toString())
    	}
    	else{
    		if(files_count > 1)
    		  c(filename+":"+lines[line_number-1].toString())
    		else
    		  c(lines[line_number-1].toString())
    	}
    }
  }
	 
}

// function dir_read(dirname, pattern, flags){
//   fs.readdir(dirname, function( err, files ) {
//     if(err){
//       console.error( "Could not list the directory.", err );
//       process.exit( 1 );
//     }
        
//     files.forEach(function(file, index){
//       if(! (fs.lstatSync(dirname + "/" + file).isDirectory()) ){
//         get_data_from_file(dirname + "/" + file, pattern, flags, 0)
//       }
//       else{
//       	c(`grep: ${dirname}/${file}: Is a directory`);
//       }
//     });  
//   });
// }

function main(){

  var commandArguments = process.argv.slice(2), arg_index = 0;

  if(commandArguments.length < 2){
    call_help('args');
  }

  for(var i=0; i<commandArguments.length; i++){
  	var this_argument = commandArguments[i];
  	if(this_argument[0] == '-')
  	  arg_index++;
  	else
  		break;
  }

  var options_passed = commandArguments.slice(0, arg_index);
  var pattern = commandArguments[arg_index].toString();
  commandArguments = commandArguments.slice(arg_index+1,commandArguments.length)

  var flags = {'n':0, 'i':0};

  var opts = {"help": false, "h":false, "i": false, "n": false, "in": false, "ni": false};
  // var result = options.parse(process.argv.slice(2), opts);

  for(var i = 0; i < options_passed.length; i++){

    switch(options_passed[i]){
      case '--help':
        call_help('help');
        break;
      case '-h':
    	call_help('help');
    	break;
      case '-i':
      	flags['i'] = 1;
      	break;
      case '-n':
    	flags['n'] = 1;
    	break;
      case '-ni':
    	flags['n'] = 1;
    	flags['i'] = 1;
    	break;
      case '-in':
      	flags['n'] = 1;
      	flags['i'] = 1;
    	break;
    }
  }

  var files_count = commandArguments.length
  for(var ind=0; ind<commandArguments.length; ++ind){
  	var file = commandArguments[ind]
  	if((fs.lstatSync(file).isDirectory()))
      c(`grep: ${file}: Is a directory`);
    else
  		get_data_from_file(file, pattern, flags, files_count);
  }

}

main()